---
title: "Conditional Probability"
author: "Sammy Twenhafel"
date: "02/17/2025"

format: 
  html:  # You will quite likely want to change all but the last one, to taste
    theme: superhero  
    mainfont: monospace
    highlight-style: github
    title-block-banner: true
    embed-resources: true
---

**Abstract:**

This is a technical blog post of **both** an HTML file *and* [.qmd file](https://raw.githubusercontent.com/cd-public/D505/refs/heads/master/hws/src/cond.qmd) hosted on GitHub pages.

# 0. Quarto Type-setting

-   This document is rendered with Quarto, and configured to embed an images using the `embed-resources` option in the header.
-   If you wish to use a similar header, here's is the format specification for this document:

``` email
format: 
  html:
    embed-resources: true
```

# 1. Setup

**Step Up Code:**

```{r}
sh <- suppressPackageStartupMessages
sh(library(tidyverse))
sh(library(caret))
library(naivebayes) 
library(tidytext)
wine <- readRDS(gzcon(url("https://github.com/cd-public/D505/raw/master/dat/pinot.rds")))
```

# 2. Conditional Probability

Calculate the probability that a Pinot comes from Burgundy given it has the word 'fruit' in the description.

$$
P({\rm Burgundy}~|~{\rm Fruit})
$$

```{r}

wine_prob = wine%>%
  rename_all(funs(tolower(.))) %>% 
  rename_all(funs(str_replace_all(., "-", "_"))) %>% 
  rename_all(funs(str_replace_all(., " ", "_")))%>%
  mutate(fruit = str_detect(description,"fruit")) 

burgundy_and_fruit <- nrow(filter(wine_prob, province=="Burgundy" & fruit))/nrow(wine_prob)

fruit <- nrow(filter(wine_prob, fruit))/nrow(wine_prob)

burgundy_and_fruit/fruit 
  
```

The probability that a Pinot comes from Burgundy given that it has the word fruit in the description is 21.96%.

# 3. Naive Bayes Algorithm

We train a naive bayes algorithm to classify a wine's province using: 1. An 80-20 train-test split. 2. Three features engineered from the description 3. 5-fold cross validation.

We report Kappa after using the model to predict provinces in the holdout sample.

```{r}
wino = wine%>%
  rename_all(funs(tolower(.))) %>% 
  rename_all(funs(str_replace_all(., "-", "_"))) %>% 
  rename_all(funs(str_replace_all(., " ", "_")))%>%
  mutate(spicy = str_detect(description,"spicy"))%>%
  mutate(rich = str_detect(description,"rich"))%>%
  mutate(cranberry = str_detect(description,"cranberry"))

set.seed(505)
wine_index <- createDataPartition(wino$province, p = 0.80,
                                  list = FALSE)
train <- wino[ wine_index, ]
test <- wino[-wine_index, ]

fit <- train(province ~ .,
             data = train, 
             method = "naive_bayes",
             metric = "Kappa",
             trControl = trainControl( method = "cv",
                                       number = 5))
fit
```
The Kappa from the model was 0.0042 which means that the modal is very bad at predicting which province the Pinots came frome.



# 4. Frequency Differences

We find the three words that most distinguish New York Pinots from all other Pinots.

```{r}
df = wine

df = df %>%
  unnest_tokens(word, description)

df <- df %>%
  anti_join(stop_words)

df <- df %>%
  filter(word != "wine") %>%
  filter(word != "pinot")%>%
  filter(word != "noir")

df <- df %>%
  count(id, word)

df <- df %>%
  group_by(id)

df <- df %>% 
  mutate(freq = n/sum(n))

df <- df %>% 
  mutate(exists = (n>0))

df <- df %>% 
  ungroup()

df <- df %>% 
  group_by(word)

df <- df %>%
  mutate(total = sum(n))

df %>% 
  count(word) %>%
  arrange(desc(n))

df <- df %>% 
  left_join(select(wine, id, province), by = "id")

df %>% 
  filter(province == "New_York")%>%
  count(province, word) %>%
  group_by(province) %>% 
  top_n(3,n) %>% 
  arrange(province, desc(n))

```
The three words that distinguish New York Pinots from all other Pinots are cherry, palate, and tannins.

